<?xml version="1.0" encoding="UTF-8"?>

<chapter id ="prepare_openTripPlanner_server">
  	<title>Prepare OpenTripPlanner server</title>
  	    <para>In order to contact the OpenTripPlanner API, we will set up a local web server (for now). The .jar file <varname>otp-2.0.0-shaded.jar</varname> is located at the root of the project and corresponds to OpenTripPlanner 2.0 </para>
  	    
  	    <para>When it is executed, it will use the files in otpData/  to create the graph. By default, when the graph is created, the transit network will contain the GTFS data of the Tec and the Stib. If you want to add a GTFS file, please put it in the otpData/  folder and add its name in the build-config.json file like this.</para>
  	    
  	    <itemizedlist>
  	        <listitem><para>"gtfs" : "tec-gtfs.zip|stib-gtfs.zip|<varname>my-gtfs.zip</varname>"</para></listitem>
  	    </itemizedlist>
  	    
  	    <para>For example if we remove the GTFS file tec-gtfs.zip in our build-config.json we've got    :</para>
  	    <itemizedlist>
  	        <listitem><para>"gtfs" : "stib-gtfs.zip"</para></listitem>
  	    </itemizedlist>
  	    
  	    <para>Please be careful, for OpenTripPlanner 2 to detect a GTFS file, its name must end in .zip and must contain the letters.
                      Now all we have to do is launch our server.</para>
                      
        <programlisting xml:space="preserve">
-- at the root of the project:
$ java -Xmx4G -jar otp-2.0.0-shaded.jar   --build --save ./otpData/
        </programlisting>
        
        <para>The parameter <varname>-Xmx4G</varname> means that you reserve 4GB of memory in order to build the graph containing our OSM and GTFS data from Stib and Tec. If you decide to use only OSM and Stib data, the parameter <varname>-Xmx2G</varname> would be sufficient. The parameter<varname>--build</varname> means the graph is build and <varname>--save</varname> means we store the graph onto disk.
                        To start the server</para>
        <programlisting xml:space="preserve">
-- at the root of the project:
$ java -jar otp-2.0.0-shaded.jar   --load --serve ./otpData/
        </programlisting>

      <para><varname>--load</varname>  means we load the graph just built before and <varname>--serve</varname> simply means we run  an OTP API server</para>
  </chapter>