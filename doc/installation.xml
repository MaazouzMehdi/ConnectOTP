<?xml version="1.0" encoding="UTF-8"?>

<chapter id ="installation">
  	<title>Setting up the project</title>
        <sect1 id="github">
            <title>Getting the project</title>
                <para>Please go to the official <ulink url="https://github.com/MobilityDB/MobilityDB-OpenTripPlanner">github</ulink> page of the project and download the various files there, or simply clone the project.
                Here is the command to clone the repository</para>
                
                <programlisting xml:space="preserve">
$ git clone https://github.com/MobilityDB/MobilityDB-OpenTripPlanner
              </programlisting>
              
            <para>This project contains several files, here is a brief overview :</para>
                
                <itemizedlist>
                      <listitem><para>make_doc.sh to generate the worksop's documentation.</para></listitem>
                      <listitem><para>workshop/ contains pregenerated versions of workshop's documentation.</para></listitem>
                     <listitem><para>doc/ contains the necessary files to generate this workshop.</para></listitem>
                    <listitem><para>src/ contains the sql and python files that will allow the generation of MobilityTrips.</para></listitem>
			              <listitem><para>otpData/ contains the files necessary for the WEB OTP server to function properly. These files are :  
			                    <itemizedlist>
			                        <listitem><para>brussels.pbf corresponds to the brussels.osm file reduced</para></listitem>
                              <listitem><para>stib-gtfs.zip corresponds to the GTFS data of the Stib covering the months of March 2022 to April 2022</para></listitem>
                              <listitem><para>tec-gtfs.zip corresponds to the GTFS data of the TEC covering the months of March 2022 to May 2022</para></listitem>
                               <listitem><para>build-config.json contains options and parameters that are taken into account during the graph building process</para></listitem>
                          </itemizedlist></para></listitem>
                </itemizedlist>
    </sect1>
    
    <sect1 id="prepare_database">
    <title>Prepare Database</title>
      
        	    <para>For the moment, we will use the OSM map of Brussels. The data was fetched via the OpenStreetMap API (Overpass API) and then reduced into a zip file.
        	     The result can be found in the root of the project in the file ./brussels.zip. Please extract this file in order to get ./brussels.osm file. Then, open a console</para>
  	    <programlisting xml:space="preserve">
$ createdb -h localhost -p 5432 -U dbowner brusselsOTP
-- replace localhost with your database host, 5432 with your port,
-- and dbowner with your database use
      </programlisting>
      <para>this command line allows the creation of the brusselsOTP database that we will use throughout this workshop</para>
      <para>MobilityDB-OpenTripPlanner is a project that depends on  Postgis, MobilityDB as well as Hstore. This is why we need to add these extensions to our database</para>
      <programlisting xml:space="preserve">
-- create needed extensions 
$ psql -h localhost -p 5432 -U dbowner -d brusselsOTP  -c 'CREATE EXTENSION hstore'

$ psql -h localhost -p 5432 -U dbowner -d brusselsOTP  -c 'CREATE EXTENSION postgis'
$ psql -h localhost -p 5432 -U dbowner -d brusselsOTP  -c 'CREATE EXTENSION MobilityDB '
-- adds the PostGIS and the MobilityDB extensions to the database
	    </programlisting>
	    
	    <para>The last two lines can be executed in a single line by using the <varname>CASCADE</varname> parameter which install Postgis extension  before installing MobilityDB extension .</para>
      <programlisting xml:space="preserve">
$ psql -h localhost -p 5432 -U dbowner -d brusselsOTP  -c 'CREATE EXTENSION MobilityDB CASCADE'
      </programlisting>
      
      <para>This last command will allow us to create a topology for the city of Brussels by creating two tables, namely <varname>ways</varname> as well as <varname>ways_vertices_pgr</varname>.
      Don't forget to unzip brussels.zip to get brussels.osm</para>
     <programlisting xml:space="preserve">
$ osm2pgrouting -W 'password' -h localhost -p 5432 -U dbowner -f brussels.osm -d brusselsOTP
-- replace password by your dbowner's password
      </programlisting>
        
        <para>the table <varname>ways_vertices_pgr</varname> brings us more than 116000 nodes located in the Brussels area. It is from these points that we 
        will choose our source nodes and target nodes.</para>
    </sect1>
    
    <sect1 id="prepare_openTripPlanner_server">
      <title>Prepare OpenTripPlanner server</title>
      
        	    <para>In order to contact the OpenTripPlanner API, we will set up a local web server</para>. 
        	    <para>The .jar file <varname>otp-2.1.0-SNAPSHOT-shaded.jar</varname> is located at the root of the project and corresponds to OpenTripPlanner 2.1 (actually, it corresponds to a modified version of OpenTripPlanner 2.1 which offers a better compatibility with GBFS format, see <ulink url="https://github.com/MobilityDB/MobilityDB-OpenTripPlanner/blob/main/README.md">README.md</ulink> for more information) </para>
  	    
  	    <para>When it is executed, it will use the files in otpData/  to create the graph. By default, when the graph is created, the transit network will contain the GTFS data of the Tec and the Stib. If you want to add a GTFS file, please put it in the otpData/  folder and add its name in the build-config.json file like this.</para>
  	    
  	    <itemizedlist>
  	        <listitem><para>"gtfs" : "tec-gtfs.zip|stib-gtfs.zip|<varname>my-gtfs.zip</varname>"</para></listitem>
  	    </itemizedlist>
  	    
  	    <para>For example if we remove the GTFS file tec-gtfs.zip in our build-config.json we've got    :</para>
  	    <itemizedlist>
  	        <listitem><para>"gtfs" : "stib-gtfs.zip"</para></listitem>
  	    </itemizedlist>
  	    
  	    <para>Please be careful, for OpenTripPlanner to detect a GTFS file, its name must end in .zip and must contain the letters.
                      Now all we have to do is launch our server.</para>
                      
        <programlisting xml:space="preserve">
-- at the root of the project:
$ java -Xmx4G -jar otp-2.1.0-SNAPSHOT-shaded.jar   --build --save ./otpData/
        </programlisting>
        
        <para>The parameter <varname>-Xmx4G</varname> means that you reserve 4GB of memory in order to build the graph containing our OSM and GTFS data from Stib and Tec. If you decide to use only OSM and Stib data, the parameter <varname>-Xmx2G</varname> would be sufficient. The parameter<varname>--build</varname> means the graph is build and <varname>--save</varname> means we store the graph onto disk.
                        To start the server</para>
        <programlisting xml:space="preserve">
-- at the root of the project:
$ java -jar otp-2.1.0-SNAPSHOT-shaded.jar   --load --serve ./otpData/
        </programlisting>

      <para><varname>--load</varname>  means we load the graph just built before and <varname>--serve</varname> simply means we run  an OTP API server</para>
    </sect1>
    
    <sect1 id="prepare_qGis">
      <title>Prepare QGIS</title>
        	  <para>To display the trips, the Qgis tool is used. Instructions for downloading and installing it can be found  at this  <ulink url="https://www.qgis.org/fr/site/forusers/download.html">address</ulink></para>
  	  <para>When connecting Qgis with your database, please enable basic authentication. Otherwise, there is a risk that the Move module do not work properly</para>
  	  
        <para>
				  <inlinemediaobject>
					  <imageobject>
						  <imagedata fileref='../images/07.png' width='500pt' />
					  </imageobject>
				  </inlinemediaobject>
			  </para>
			  
			  <para>After installing Qgis and its Move module, you should be able to access to the below window.
			                  If you have any problems, please refer to the <ulink url="https://github.com/mschoema/move">Move  </ulink>github page</para>

        <para>
				  <inlinemediaobject>
					  <imageobject>
						  <imagedata fileref='../images/move.png' width='500pt' />
					  </imageobject>
				  </inlinemediaobject>
			  </para>
    
    </sect1>
</chapter>
